#include<bits/stdc++.h>
#include<windows.h>
namespace IO
{
	FILE * In;
	inline void IO(const char * name){In=fopen(name,"w+");srand(time(0));}
	template<typename T>
	inline char * Insert_num(char * c,T x)
	{
		int len=-1;
		if(x==0)c[len=0]='0';
		while(x)
		{
			c[++len]=x%10+'0';
			x/=10;
		}
		for(int i=0,j=len;i<j;i++,j--)std::swap(c[i],c[j]);
		return c+len+1;
	}
	template<typename T1,typename ...T2>
	inline void IO(const char * name,T1 x,T2 ... arg)
	{
		static char new_name[105];
		std::memset(new_name,0,sizeof(new_name));
		char * i=new  char[strlen(name)+3];
		strcpy(i,name);
		char * j=new_name;
		for(;*i!='\0'&&(*i!='%'||*(i+1)!='d');i++,j++)*j=*i;
		if(*i=='\0')return fprintf(stdout,"error!the parameters are too much!"),IO(name),void();
		j=Insert_num(j,x);
		i=i+2;
		for(;*i!='\0';i++,j++)*j=*i;
		IO((const char *)new_name,arg...);
	}
}
namespace Put
{
	inline const char * Put(const char * name)
	{
		char * new_name=new char [strlen(name)+10];
		std::strcpy(new_name,name);
		return new_name;
	}
	template<typename T1,typename ...T2>
	inline const char * Put(const char * name,T1 x,T2 ... arg)
	{
		char new_name[105];
		std::memset(new_name,0,sizeof(new_name));
		char * i=new  char[strlen(name)+3];
		strcpy(i,name);
		char * j=new_name;
		for(;*i!='\0'&&(*i!='%'||*(i+1)!='d');i++,j++)*j=*i;
		if(*i=='\0')return fprintf(stdout,"error!the parameters are too much!"),(const char *)name;
		j=IO::Insert_num(j,x);
		i=i+2;
		for(;*i!='\0';i++,j++)*j=*i;
//		printf("%s\n",new_name);
		return Put((const char *)new_name,arg...);
	}
}
namespace Printf
{
	template<typename T1,typename ...T2>
	inline void Printf(const char * name,T1 x,T2 ... arg)
	{
		fprintf(IO::In,Put::Put(name,x,arg...));
	}
}
namespace Rand
{
	template<typename T>inline T random(){return (T)rand()*rand()*rand();}
	template<typename T>inline T random(T p){return (random<T>()%p+p)%p+1;}
	template<typename T1,typename T2>inline T1 random(T1 lower,T2 upper){return lower+random(upper-lower+1)-1;}
}
namespace String
{
	std::vector<char> String(int len,const char * S)
	{
		std::vector<char> re;
		int n=strlen(S);
		for(int i=1;i<=len;i++)
			re.push_back(*(S+Rand::random(0,n-1)));	
		return re;
	}
	inline void Print(std::vector<char> re,char c='\n')
	{
		for(auto i:re)
			fprintf(IO::In,"%c",i);
		fprintf(IO::In,"%c",c);
	}
}
namespace Pair
{
	template<typename T>inline std::pair<T,T>Pair(T p)
	{
		std::pair<T,T>re=std::make_pair(Rand::random(p),Rand::random(p));
		while(re.first>=re.second)re=std::make_pair(Rand::random(p),Rand::random(p));
		return re;
	}
	template<typename T>inline void Print(std::pair<T,T> re,char c='\n'){fprintf(IO::In,"%lld %lld%c",(long long)re.first,(long long)re.second,c);}
}
namespace Vector
{
	template<typename T>std::vector<T> Vector(std::vector<T>lower,std::vector<T>upper)
	{
		if(lower.size()!=upper.size())
		{
			fprintf(stdout,"error!the parameters are different!\n");
			return {};
		}
		std::vector<T> re;
		for(int i=0;i<lower.size();i++)
			re.push_back(Rand::random(lower[i],upper[i]));
		return re;
	}
	template<typename T>inline void Print(std::vector<T> re,char c='\n')
	{
		for(auto i:re)fprintf(IO::In,"%lld ",(long long)i);
		fprintf(IO::In,"%c",c);
	}
}
namespace UFS
{
	template<int T>
	struct UFS
	{
		int fa[T];
		UFS(){for(int i=0;i<T;i++)fa[i]=i;}
		inline int find(int x){if(fa[x]==x)return x;return fa[x]=find(fa[x]);}
		inline bool IsSplit(int x,int y){return find(x)!=find(y);}
		inline void merge(int x,int y){if(IsSplit(x,y)==0)return;int fat=find(x),fbt=find(y);fa[fat]=fbt;}
	};
}
namespace Tree
{
	inline std::vector<std::pair<int,int> > Tree(int n)
	{
		UFS::UFS<1000005> S;
		std::vector<std::pair<int,int> > re;
		for(int i=2;i<=n;i++)
		{
			for(;;)
			{
				int fa=Rand::random(n);
				if(S.IsSplit(i,fa))
				{
					S.merge(i,fa);
					re.push_back(std::make_pair(fa,i));
					break;
				}
			}
		}
		random_shuffle(re.begin(),re.end()); 
		return re;
	}
}
namespace Atlas
{
	inline std::vector<std::pair<int,int> > Atlas(int n,int m)
	{
		std::map<std::pair<int,int>,bool>mp;		
		if(m>n*(n-1)/2)
		{
			fprintf(stdout,"error!The edges are too much!\n");
			return {};
		}
		std::vector<std::pair<int,int> > re=Tree::Tree(n);
		for(int i=n;i<=m;i++)
		{
			for(;;)
			{
				std::pair<int,int> now=Pair::Pair(n);
				if(mp[now]==0)
				{
					mp[now]=0;
					re.push_back(now);
					break;
				}
			}
		}
		random_shuffle(re.begin(),re.end()); 
		return re;
	}
}
namespace Cactus
{
	inline std::vector<std::pair<int,int> >Circle(std::vector<int> cross)
	{
		if(cross.size()<=1)return {}; 
		std::vector<std::pair<int,int> > re;
		if(Rand::random<int>()&1)//简单环 
		{
			for(int i=0;i<cross.size()-1;i++)
				re.push_back(std::make_pair(cross[i],cross[i+1]));
			re.push_back(std::make_pair(*--cross.end(),*cross.begin()));
		}
		else//非简单环
		{
			random_shuffle(cross.begin(),cross.end());
			int last=1;
			for(int i=1;i<cross.size();i++)
			{
				if(Rand::random<int>()%7<=2||i==cross.size()-1)
				{
					re.push_back(std::make_pair(cross[0],cross[last]));
					re.push_back(std::make_pair(cross[0],cross[i]));
					for(int j=last;j<i;j++)
						re.push_back(std::make_pair(cross[j],cross[j+1]));
					last=i+1;
				}
			}
		}
		random_shuffle(re.begin(),re.end());
		return re;
	}
	inline std::vector<std::pair<int,int> >Cactus(int n,int m,double alpha=1)//alpha:
	{
		static int belong[1000005];memset(belong,0,sizeof(belong));
		std::vector<int> cross[1000005];
		for(int i=1;i<=n;i++)belong[i]=Rand::random(n),cross[belong[i]].push_back(i);
		std::vector<std::pair<int,int> > re;
		for(int i=1;i<=n;i++)
		{
			std::vector<std::pair<int,int> > tp=Circle(cross[i]);
			for(auto i:tp)re.push_back(i);
		}
		UFS::UFS<1000005> S;
		int cnt=0;
		for(int i=1;i<=n;i++)
			if(cross[i].size())
				cnt++;
		random_shuffle(re.begin(),re.end());
		while(re.size()>m-cnt)re.pop_back();
		for(int i=1;i<cnt;i++)
		{
			if(alpha*RAND_MAX<std::rand())continue;
			for(;;)
			{
				std::pair<int,int> tp=Pair::Pair(n);
				if(S.IsSplit(belong[tp.first],belong[tp.second]))
				{
					S.merge(belong[tp.first],belong[tp.second]);
					re.push_back(std::make_pair(tp.first,tp.second));
					break;
				}
			}
		}
		random_shuffle(re.begin(),re.end());
		return re;
	}
}
namespace Sequence
{
	template<typename T>
	inline std::vector<T>Sequence(int len,T lower,T upper)
	{
		std::vector<T> re;
		for(int i=1;i<=len;i++)
			re.push_back(Rand::random(lower,upper));
		return re;
	}
	template<typename T>
	inline void Print(std::vector<T>re,char c=' ')
	{
		for(auto i:re)Printf::Printf("%d",i),fprintf(IO::In,"%c",c);
	}
}
namespace Array
{
	inline std::vector<int>Array(int len)
	{
		std::vector<int> re;
		for(int i=1;i<=len;i++)re.push_back(i);
		std::random_shuffle(re.begin(),re.end());
		return re;
	}
	inline void Print(std::vector<int> re,char c=' ')
	{
		for(auto i:re)Printf::Printf("%d",i),fprintf(IO::In,"%c",c);
	}
}
namespace Print_Atlas
{
	template<typename T>
	inline void Print_Atlas(std::vector<std::pair<int,int> >re,std::vector<T> lower,std::vector<T> upper)
	{
		for(auto i:re)
		{
			Pair::Print(i,' ');
			for(int j=0;j!=lower.size();j++)
				fprintf(IO::In,"%lld ",(long long)Rand::random(lower[j],upper[j]));
			fprintf(IO::In,"\n");
		}
	}
}
namespace Function
{
	void Function(const char *argv_0,const char *argv_1,const char *argv_2)//运行argv_0,从argv_1读入,输出到argv_2 
	{
		char argv0[105],argv1[105],argv2[105];
		strcpy(argv0,argv_0);
		strcpy(argv1,argv_1);
		strcpy(argv2,argv_2);
		printf("%s\n%s\n%s\n",argv_0,argv_1,argv_2);
		SECURITY_ATTRIBUTES saAttr={0};
		saAttr.nLength=sizeof(SECURITY_ATTRIBUTES);
		saAttr.bInheritHandle=true; 
		saAttr.lpSecurityDescriptor=NULL;
		HANDLE ChildIn_Read,ChildIn_Write;
		CreatePipe(&ChildIn_Read,&ChildIn_Write,&saAttr,0);
		SetHandleInformation(ChildIn_Write,HANDLE_FLAG_INHERIT,0);
		HANDLE ChildOut_Read,ChildOut_Write;
		CreatePipe(&ChildOut_Read,&ChildOut_Write,&saAttr,0);
		SetHandleInformation(ChildOut_Read,HANDLE_FLAG_INHERIT,0);
		STARTUPINFO StartupInfo={0};
		StartupInfo.cb=sizeof(STARTUPINFO);
		StartupInfo.hStdError=ChildOut_Write; 
		StartupInfo.hStdOutput=ChildOut_Write;
		StartupInfo.hStdInput=ChildIn_Read;
		StartupInfo.dwFlags|=STARTF_USESTDHANDLES;
		PROCESS_INFORMATION ProcessInfo={0};
		CreateProcess(NULL,argv0,NULL,NULL,true,NULL,NULL,NULL,&StartupInfo,&ProcessInfo);
		bool flag=false;
		HANDLE InputFile=CreateFile(argv1,GENERIC_READ,0,0,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);
		while(true)
		{
			char buffer[4096]={0};
			DWORD BytesRead,BytesWritten;
			flag=ReadFile(InputFile,buffer,4096,&BytesRead,NULL);
			if(!flag||(BytesRead==0))break;
			flag=WriteFile(ChildIn_Write,buffer,BytesRead,&BytesWritten,NULL);
			if(!flag)break;
		}
		CloseHandle(InputFile);
		CloseHandle(ChildIn_Write);
		CloseHandle(ChildOut_Write);
		HANDLE OutputFile=CreateFile(argv2,GENERIC_WRITE,0,0,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);
		while(true)
		{
			char buffer[4096]={0};
			DWORD BytesRead,BytesWritten;
			flag=ReadFile(ChildOut_Read,buffer,4096,&BytesRead,NULL);
			if(!flag||(BytesRead==0))break;
			flag=WriteFile(OutputFile,buffer,BytesRead,&BytesWritten,NULL);
			if(!flag)break;
		}
		CloseHandle(OutputFile);
	}
}
namespace Fc
{
	bool Fc(const char * name_1,const char * name_2)//比较name_1,name_2 
	{
		HANDLE input,output;
		input=CreateFile(name_1,GENERIC_READ,0,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
		output=CreateFile("#hidden_file_1.ypa",GENERIC_WRITE,0,0,OPEN_ALWAYS,FILE_ATTRIBUTE_HIDDEN,NULL);
		bool flag;
		while(1)
		{
			char buffer[4096]={0};
			DWORD BytesRead,BytesWritten;
			flag=ReadFile(input,buffer,4096,&BytesRead,NULL);
			if(!flag||(BytesRead==0))break;
			flag=WriteFile(output,buffer,BytesRead,&BytesWritten,NULL);
			if(!flag)break;
		}
		CloseHandle(input);
		CloseHandle(output);
		input=CreateFile(name_2,GENERIC_READ,0,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
		output=CreateFile("#hidden_file_2.ypa",GENERIC_WRITE,0,0,OPEN_ALWAYS,FILE_ATTRIBUTE_HIDDEN,NULL);
		while(1)
		{
			char buffer[4096]={0};
			DWORD BytesRead,BytesWritten;
			flag=ReadFile(input,buffer,4096,&BytesRead,NULL);
			if(!flag||(BytesRead==0))break;
			flag=WriteFile(output,buffer,BytesRead,&BytesWritten,NULL);
			if(!flag)break;
		}
		CloseHandle(input);
		CloseHandle(output);
		return system("fc #hidden_file_1.ypa #hidden_file_2.ypa");
	}
}

